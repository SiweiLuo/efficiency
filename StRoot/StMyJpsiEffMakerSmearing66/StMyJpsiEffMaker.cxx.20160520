/***************************************************************************
 *
 **************************************************************************/
#include "StMyJpsiEffMaker.h"

#include "StEventTypes.h"
#include "StEvent/StEvent.h"
#include "TChain.h"
#include "StMyElectronMaker/StMyElectron.h"
#include "StMyElectronMaker/StMyElectronEvent.h"
#include "TLorentzVector.h"
#include "StRtsTable.h"

#include "TH1F.h"
#include "TH2F.h"
#include "TF1.h"
#include "TH3F.h"
#include "TH2D.h"
#include "TProfile.h"
#include "TRandom3.h"
#include "TVector3.h"

#include "cuts.h"

#define EMASS 0.000511
#define nHitsFitCut 20

#define PMASS 0.938272
ClassImp(StMyJpsiEffMaker);

//_____________________________________________________________
StMyJpsiEffMaker::StMyJpsiEffMaker(const char *name, TChain *chain):StMaker("myJpsiEff",name)
{
	myChain = new TChain("mcT");
	myChain->Add(chain);
	evCnt = 1;
	myEvent = new StMyElectronEvent();
	myChain->SetBranchAddress("mcE",&myEvent);
	mEtaMin = -1.;
	mEtaMax = 1.;
	mdEta = 0.1;

	for(int i=0;i<20;i++)
		for(int j=0;j<6;j++){
			mTofEffParsPos[i][j] = 0.;
			mTofEffParsNeg[i][j] = 0.;
		}
	mRan = new TRandom3();
	//mRan1= new TRandom3();

	LOG_DEBUG << "StMyJpsiEffMaker::ctor"  << endm;
}

//_____________________________________________________________
StMyJpsiEffMaker::~StMyJpsiEffMaker() 
{ }

//_____________________________________________________________
void StMyJpsiEffMaker::Clear(Option_t* option) 
{ 
}

//_____________________________________________________________
Int_t StMyJpsiEffMaker::Init()
{
	betarootfile = new TFile("/star/data01/pwg/siwei/Jpsi/TOF_1_beta_mean_sigma.root");
	betamean = (TH1F*)betarootfile->Get("Tof_mean");
	betasigma = (TH1F*)betarootfile->Get("Tof_sigma");
	nsigmarootfile = new TFile("Nsigma.root");
	mean = (TH1F*)nsigmarootfile->Get("mh1mean");
	sigma = (TH1F*)nsigmarootfile->Get("mh1sigma");

	if(POL==0)meanfit = new TF1("meanfit","[0]",0.,16.5);
	else meanfit = new TF1("meanfit","[0]+[1]*x",0.,16.5);
	if(POL==0)sigmafit = new TF1("sigmafit","[0]",0.,16.5);
	else sigmafit = new TF1("sigmafit","[0]+[1]*x",0.,16.5);
	mean->Fit("meanfit","0Q");
	sigma->Fit("sigmafit","Q0");

	double para1[2];
	para1[0] = meanfit->GetParameter(0)+meanplus*meanfit->GetParError(0)-meanminus*meanfit->GetParError(0);
	para1[1] = sigmafit->GetParameter(0)+sigmaplus*sigmafit->GetParError(0)-sigmaminus*sigmafit->GetParError(0);

	double para2[2];
	para2[0] = meanfit->GetParameter(0)+meanplus*meanfit->GetParError(0)-meanminus*meanfit->GetParError(0);
	para2[1] = sigmafit->GetParameter(0)+sigmaplus*sigmafit->GetParError(0)-sigmaminus*sigmafit->GetParError(0);

	betafit = new TF1("betafit","[0]",0,4);

	char buf[1024];
	sprintf(buf,"%s_cent_%d_%d.root","OutFile",0,9);
	f = new TFile(buf,"recreate");
	f->cd();

	myGaus = new TF1("myGaus","gaus",-6,6);
	myGaus->SetParameters(1,para2[0],para2[1]);
	//myGaus->SetParameters(1,-0.3823,0.8236);

	myGaus_1 = new TF1("myGaus_1","gaus",-6,6);
	myGaus_1->SetParameters(1,para1[0],para1[1]);	
	//	myGaus_1->SetParameters(1,-0.3823,0.8236);  

	betaGaus1 = new TF1("betaGaus1","gaus",0.9,1.1);
	betaGaus2 = new TF1("betaGaus2","gaus",0.9,1.1);

	function_sigma = new TF1("function_sigma","[0]+[1]*x+[2]*x*x",0,30);	   
	function_sigma->SetParameters(1.77250e-2,3.18836e-3,1.68829e-3);

	function_tofeff = new TF1("function_tofeff","[0]*exp(-pow([1]/x,[2]))",0,30);
	function_tofeff->SetParameters(1.77250e-2,3.18836e-3,1.68829e-3);

	ifstream inf("tofeff/Eminus_TofEff_all_7.root_tofeffEMCMat_err.txt");
	cout<<"e-"<<endl;
	for(int i=0;i<20;i++){
		for(int j=0;j<6;j++) inf>>mTofEffParsNeg[i][j];
		for(int j=0;j<6;j++) cout<<mTofEffParsNeg[i][j]<<",";
		cout<<endl;
	}
	cout<<endl;
	inf.close();

	cout<<"e+"<<endl;
	inf.open("tofeff/Eplus_TofEff_all_7.root_tofeffEMCMat_err.txt");
	for(int i=0;i<20;i++){
		for(int j=0;j<6;j++) inf>>mTofEffParsPos[i][j];
		for(int j=0;j<6;j++) cout<<mTofEffParsPos[i][j]<<",";
		cout<<endl;
	}
	cout<<endl;
	inf.close();

	hMcJpsiPhiPt = new TH2F("hMcJpsiPhiPt","Jpsi Pt vs #phi",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hMcJpsiPhiPt->Sumw2();
	hMcJpsiCosThetaPt = new TH2F("hMcJpsiCosThetaPt","Jpsi Pt vs Cos(#theta); Cos(#theta); Jpsi Pt",10,-1,1,120,0,30);
	hMcJpsiCosThetaPt->Sumw2();

	McJpsiCosThetaPt = new TH2F("McJpsiCosThetaPt","Rc Jpsi Pt vs Cos(#theta); Cos(#theta); Jpsi Pt",10,-1,1,120,0,30);
	McJpsiCosThetaPt->Sumw2();
	RcJpsiCosThetaPt = new TH2F("RcJpsiCosThetaPt","Rc Jpsi Pt vs Cos(#theta); Cos(#theta); Jpsi Pt",10,-1,1,120,0,30);
	RcJpsiCosThetaPt->Sumw2();
	HT0JpsiCosThetaPt = new TH2F("HT0JpsiCosThetaPt","Rc Jpsi Pt vs Cos(#theta); Cos(#theta); Jpsi Pt",10,-1,1,120,0,30);
	HT0JpsiCosThetaPt->Sumw2();
	HT1JpsiCosThetaPt = new TH2F("HT1JpsiCosThetaPt","Rc Jpsi Pt vs Cos(#theta); Cos(#theta); Jpsi Pt",10,-1,1,120,0,30);
	HT1JpsiCosThetaPt->Sumw2();
	HT2JpsiCosThetaPt = new TH2F("HT2JpsiCosThetaPt","Rc Jpsi Pt vs Cos(#theta); Cos(#theta); Jpsi Pt",10,-1,1,120,0,30);
	HT2JpsiCosThetaPt->Sumw2();

	hRcJpsiThetaPt = new TH2F("hRcJpsiThetaPt","Jpsi Pt vs #theta; #theta; Jpsi Pt",10,0,TMath::Pi(),120,0,30);
	hRcJpsiThetaPt->Sumw2();
	hEidJpsiThetaPt = new TH2F("hEidJpsiThetaPt","Jpsi Pt vs #theta; #theta; Jpsi Pt",10,0,TMath::Pi(),120,0,30);
	hEidJpsiThetaPt->Sumw2();
	hRcJpsiCosThetaPt = new TH2F("hRcJpsiCosThetaPt","Jpsi Pt vs Cos(#theta); Cos(#theta); Jpsi Pt",10,-1,1,120,0,30);
	hRcJpsiCosThetaPt->Sumw2();
	hHt0JpsiCosThetaPt = new TH2F("hHt0JpsiCosThetaPt","Jpsi Pt vs Cos(#theta); Cos(#theta); Jpsi Pt",10,-1,1,120,0,30);
	hHt0JpsiCosThetaPt->Sumw2();

	hRcJpsiPhiPt = new TH2F("hRcJpsiPhiPt","Jpsi Pt vs #phi; #phi; Jpsi Pt",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hRcJpsiPhiPt->Sumw2();

	hHt0JpsiPhiPt = new TH2F("hHt0JpsiPhiPt","Jpsi Pt vs #phi",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hHt0JpsiPhiPt->Sumw2();
	hMBJpsiCosThetaPt = new TH2F("hMBJpsiCosThetaPt","Jpsi Pt vs Cos(#theta)",10,-1,1,120,0,30);
	hMBJpsiCosThetaPt->Sumw2();
	MBJpsiCosThetaPt = new TH2F("MBJpsiCosThetaPt","Rc Jpsi Pt vs Cos(#theta)",10,-1,1,120,0,30);
	MBJpsiCosThetaPt->Sumw2();

	hMBJpsiThetaPt = new TH2F("hMBJpsiThetaPt","Jpsi Pt vs #theta",10,0,TMath::Pi(),120,0,30);
	hMBJpsiThetaPt->Sumw2();

	hMcJpsiPhiPt1 = new TH2F("hMcJpsiPhiPt1","Jpsi Pt vs #phi",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hMcJpsiPhiPt1->Sumw2();
	hRcJpsiPhiPt1 = new TH2F("hRcJpsiPhiPt1","Jpsi Pt vs #phi",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hRcJpsiPhiPt1->Sumw2();
	hEidJpsiPhiPt1 = new TH2F("hEidJpsiPhiPt1","Jpsi Pt vs #phi",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hEidJpsiPhiPt1->Sumw2();
	hMBJpsiPhiPt1 = new TH2F("hMBJpsiPhiPt1","Jpsi Pt vs #phi",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hMBJpsiPhiPt1->Sumw2();
	hHt0JpsiPhiPt1 = new TH2F("hHt0JpsiPhiPt1","Jpsi Pt vs #phi",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hHt0JpsiPhiPt1->Sumw2();

	hHt1JpsiPhiPt1 = new TH2F("hHt1JpsiPhiPt1","Jpsi Pt vs #phi",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hHt1JpsiPhiPt1->Sumw2();
	hHt2JpsiPhiPt1 = new TH2F("hHt2JpsiPhiPt1","Jpsi Pt vs #phi",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hHt2JpsiPhiPt1->Sumw2();

	hMBJpsiPhiPt = new TH2F("hMBJpsiPhiPt","Jpsi Pt vs #phi",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hMBJpsiPhiPt->Sumw2();

	hHt1JpsiCosThetaPt = new TH2F("hHt1JpsiCosThetaPt","Jpsi Pt vs Cos(#theta)",10,-1,1,120,0,30);
	hHt1JpsiCosThetaPt->Sumw2();
	hHt1JpsiPhiPt = new TH2F("hHt1JpsiPhiPt","Jpsi Pt vs #phi",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hHt1JpsiPhiPt->Sumw2();

	hHt2JpsiCosThetaPt = new TH2F("hHt2JpsiCosThetaPt","Jpsi Pt vs Cos(#theta); Cos(#theta); Jpsi Pt",10,-1,1,120,0,30);
	hHt2JpsiCosThetaPt->Sumw2();

	hMBJpsiCosThetaPt1 = new TH2F("hMBJpsiCosThetaPt1","Jpsi Pt vs Cos(#theta); Cos(#theta); Jpsi Pt",10,-1,1,120,0,30);
	hMBJpsiCosThetaPt1->Sumw2();
	hHt0JpsiCosThetaPt1 = new TH2F("hHt0JpsiCosThetaPt1","Jpsi Pt vs Cos(#theta); Cos(#theta); Jpsi Pt",10,-1,1,120,0,30);
	hHt0JpsiCosThetaPt1->Sumw2();
	hHt1JpsiCosThetaPt1 = new TH2F("hHt1JpsiCosThetaPt1","Jpsi Pt vs Cos(#theta); Cos(#theta); Jpsi Pt",10,-1,1,120,0,30);
	hHt1JpsiCosThetaPt1->Sumw2();
	hHt2JpsiCosThetaPt1 = new TH2F("hHt2JpsiCosThetaPt1","Jpsi Pt vs Cos(#theta); Cos(#theta); Jpsi Pt",10,-1,1,120,0,30);
	hHt2JpsiCosThetaPt1->Sumw2();

	hHt2JpsiPhiPt = new TH2F("hHt2JpsiPhiPt","Jpsi Pt vs #phi",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hHt2JpsiPhiPt->Sumw2();

	hMCElectronPt = new TH1D("mcElectronPt","input electron pt",300,0,30);

	hCommonhitsvsRCPt = new TH2D("hCommonhitsvsRCPt","commonhits vs RC pT;tpc commonHits;RC p_{T} (GeV/c)",50,0,50,300,0,300);
	hCommonhitsvsMCPt = new TH2D("hCommonhitsvsMCPt","commonhits vs MC pT;tpc commonHits;MC p_{T} (GeV/c)",50,0,50,300,0,300);

	hMcJpsiPhiPtCS = new TH2F("hMcJpsiPhiPtCS","Jpsi Pt vs #phi in CS frame;#phi in the CS frame;J/#psi Pt",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hMcJpsiPhiPtCS->Sumw2();
	hRcJpsiPhiPtCS = new TH2F("hRcJpsiPhiPtCS","Jpsi Pt vs #phi in CS frame;#phi in the CS frame;J/#psi Pt",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hRcJpsiPhiPtCS->Sumw2();
	hMBJpsiPhiPtCS = new TH2F("hMBJpsiPhiPtCS","Jpsi Pt vs #phi in CS frame;#phi in the CS frame;J/#psi Pt",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hMBJpsiPhiPtCS->Sumw2();
	hHt0JpsiPhiPtCS = new TH2F("hHt0JpsiPhiPtCS","Jpsi Pt vs #phi in CS frame;#phi in the CS frame;J/#psi Pt",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hHt0JpsiPhiPtCS->Sumw2();
	hHt1JpsiPhiPtCS = new TH2F("hHt1JpsiPhiPtCS","Jpsi Pt vs #phi in CS frame;#phi in the CS frame;J/#psi Pt",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hHt1JpsiPhiPtCS->Sumw2();
	hHt2JpsiPhiPtCS = new TH2F("hHt2JpsiPhiPtCS","Jpsi Pt vs #phi in CS frame;#phi in the CS frame;J/#psi Pt",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hHt2JpsiPhiPtCS->Sumw2();

	hMcJpsiPhiPtCS1 = new TH2F("hMcJpsiPhiPtCS1","Jpsi Pt vs #phi in CS frame;#phi in the CS frame;J/#psi Pt",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hMcJpsiPhiPtCS1->Sumw2();
	hRcJpsiPhiPtCS1 = new TH2F("hRcJpsiPhiPtCS1","Jpsi Pt vs #phi in CS frame;#phi in the CS frame;J/#psi Pt",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hRcJpsiPhiPtCS1->Sumw2();
	hMBJpsiPhiPtCS1 = new TH2F("hMBJpsiPhiPtCS1","Jpsi Pt vs #phi in CS frame;#phi in the CS frame;J/#psi Pt",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hMBJpsiPhiPtCS1->Sumw2();
	hHt0JpsiPhiPtCS1 = new TH2F("hHt0JpsiPhiPtCS1","Jpsi Pt vs #phi in CS frame;#phi in the CS frame;J/#psi Pt",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hHt0JpsiPhiPtCS1->Sumw2();
	hHt1JpsiPhiPtCS1 = new TH2F("hHt1JpsiPhiPtCS1","Jpsi Pt vs #phi in CS frame;#phi in the CS frame;J/#psi Pt",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hHt1JpsiPhiPtCS1->Sumw2();
	hHt2JpsiPhiPtCS1 = new TH2F("hHt2JpsiPhiPtCS1","Jpsi Pt vs #phi in CS frame;#phi in the CS frame;J/#psi Pt",10,-TMath::Pi(),TMath::Pi(),120,0,30);
	hHt2JpsiPhiPtCS1->Sumw2();

	hMcJpsiThetaPtCS = new TH2F("hMcJpsiThetaPtCS","J/#psi Pt vs #theta in CS frame;#theta in CS frame; J/#psi Pt",10,0,TMath::Pi(),120,0,30);
	hMcJpsiThetaPtCS->Sumw2();
	hRcJpsiThetaPtCS = new TH2F("hRcJpsiThetaPtCS","J/#psi Pt vs #theta in CS frame;#theta in CS frame; J/#psi Pt",10,0,TMath::Pi(),120,0,30);
	hRcJpsiThetaPtCS->Sumw2();
	hMBJpsiThetaPtCS = new TH2F("hMBJpsiThetaPtCS","J/#psi Pt vs #theta in CS frame;#theta in CS frame; J/#psi Pt",10,0,TMath::Pi(),120,0,30);
	hMBJpsiThetaPtCS->Sumw2();
	hHt0JpsiThetaPtCS = new TH2F("hHt0JpsiThetaPtCS","J/#psi Pt vs #theta in CS frame;#theta in CS frame; J/#psi Pt",10,0,TMath::Pi(),120,0,30);
	hHt0JpsiThetaPtCS->Sumw2();
	hHt1JpsiThetaPtCS = new TH2F("hHt1JpsiThetaPtCS","J/#psi Pt vs #theta in CS frame;#theta in CS frame; J/#psi Pt",10,0,TMath::Pi(),120,0,30);
	hHt1JpsiThetaPtCS->Sumw2();
	hHt2JpsiThetaPtCS = new TH2F("hHt2JpsiThetaPtCS","J/#psi Pt vs #theta in CS frame;#theta in CS frame; J/#psi Pt",10,0,TMath::Pi(),120,0,30);
	hHt2JpsiThetaPtCS->Sumw2();

	hMcJpsiThetaPtCS1 = new TH2F("hMcJpsiThetaPtCS1","J/#psi Pt vs #theta in CS frame;#theta in CS frame; J/#psi Pt",10,0,TMath::Pi(),120,0,30);
	hMcJpsiThetaPtCS1->Sumw2();
	hRcJpsiThetaPtCS1 = new TH2F("hRcJpsiThetaPtCS1","J/#psi Pt vs #theta in CS frame;#theta in CS frame; J/#psi Pt",10,0,TMath::Pi(),120,0,30);
	hRcJpsiThetaPtCS1->Sumw2();
	hMBJpsiThetaPtCS1 = new TH2F("hMBJpsiThetaPtCS1","J/#psi Pt vs #theta in CS frame;#theta in CS frame; J/#psi Pt",10,0,TMath::Pi(),120,0,30);
	hMBJpsiThetaPtCS1->Sumw2();
	hHt0JpsiThetaPtCS1 = new TH2F("hHt0JpsiThetaPtCS1","J/#psi Pt vs #theta in CS frame;#theta in CS frame; J/#psi Pt",10,0,TMath::Pi(),120,0,30);
	hHt0JpsiThetaPtCS1->Sumw2();
	hHt1JpsiThetaPtCS1 = new TH2F("hHt1JpsiThetaPtCS1","J/#psi Pt vs #theta in CS frame;#theta in CS frame; J/#psi Pt",10,0,TMath::Pi(),120,0,30);
	hHt1JpsiThetaPtCS1->Sumw2();
	hHt2JpsiThetaPtCS1 = new TH2F("hHt2JpsiThetaPtCS1","J/#psi Pt vs #theta in CS frame;#theta in CS frame; J/#psi Pt",10,0,TMath::Pi(),120,0,30);
	hHt2JpsiThetaPtCS1->Sumw2();


	hMcJpsiCosThetaPtCS = new TH2F("hMcJpsiCosThetaPtCS","J/#psi Pt vs Cos(#theta) in CS frame;Cos(#theta) in CS frame; J/#psi Pt",10,-1,1,120,0,30);
	hMcJpsiCosThetaPtCS->Sumw2();
	hRcJpsiCosThetaPtCS = new TH2F("hRcJpsiCosThetaPtCS","J/#psi Pt vs Cos(#theta) in CS frame;Cos(#theta) in CS frame; J/#psi Pt",10,-1,1,120,0,30);
	hRcJpsiCosThetaPtCS->Sumw2();
	hMBJpsiCosThetaPtCS = new TH2F("hMBJpsiCosThetaPtCS","J/#psi Pt vs Cos(#theta) in CS frame;Cos(#theta) in CS frame; J/#psi Pt",10,-1,1,120,0,30);
	hMBJpsiCosThetaPtCS->Sumw2();
	hHt0JpsiCosThetaPtCS = new TH2F("hHt0JpsiCosThetaPtCS","J/#psi Pt vs Cos(#theta) in CS frame;Cos(#theta) in CS frame; J/#psi Pt",10,-1,1,120,0,30);
	hHt0JpsiCosThetaPtCS->Sumw2();
	hHt1JpsiCosThetaPtCS = new TH2F("hHt1JpsiCosThetaPtCS","J/#psi Pt vs Cos(#theta) in CS frame;Cos(#theta) in CS frame; J/#psi Pt",10,-1,1,120,0,30);
	hHt1JpsiCosThetaPtCS->Sumw2();
	hHt2JpsiCosThetaPtCS = new TH2F("hHt2JpsiCosThetaPtCS","J/#psi Pt vs Cos(#theta) in CS frame;Cos(#theta) in CS frame; J/#psi Pt",10,-1,1,120,0,30);
	hHt2JpsiCosThetaPtCS->Sumw2();

	hMcJpsiCosThetaPtCS1 = new TH2F("hMcJpsiCosThetaPtCS1","J/#psi Pt vs Cos(#theta) in CS frame;Cos(#theta) in CS frame; J/#psi Pt",10,-1,1,120,0,30);
	hMcJpsiCosThetaPtCS1->Sumw2();
	hRcJpsiCosThetaPtCS1 = new TH2F("hRcJpsiCosThetaPtCS1","J/#psi Pt vs Cos(#theta) in CS frame;Cos(#theta) in CS frame; J/#psi Pt",10,-1,1,120,0,30);
	hRcJpsiCosThetaPtCS1->Sumw2();
	hEidJpsiCosThetaPtCS1 = new TH2F("hEidJpsiCosThetaPtCS1","J/#psi Pt vs Cos(#theta) in CS frame;Cos(#theta) in CS frame; J/#psi Pt",10,-1,1,120,0,30);
	hEidJpsiCosThetaPtCS1->Sumw2();
	hMBJpsiCosThetaPtCS1 = new TH2F("hMBJpsiCosThetaPtCS1","J/#psi Pt vs Cos(#theta) in CS frame;Cos(#theta) in CS frame; J/#psi Pt",10,-1,1,120,0,30);
	hMBJpsiCosThetaPtCS1->Sumw2();
	hHt0JpsiCosThetaPtCS1 = new TH2F("hHt0JpsiCosThetaPtCS1","J/#psi Pt vs Cos(#theta) in CS frame;Cos(#theta) in CS frame; J/#psi Pt",10,-1,1,120,0,30);
	hHt0JpsiCosThetaPtCS1->Sumw2();
	hHt1JpsiCosThetaPtCS1 = new TH2F("hHt1JpsiCosThetaPtCS1","J/#psi Pt vs Cos(#theta) in CS frame;Cos(#theta) in CS frame; J/#psi Pt",10,-1,1,120,0,30);
	hHt1JpsiCosThetaPtCS1->Sumw2();
	hHt2JpsiCosThetaPtCS1 = new TH2F("hHt2JpsiCosThetaPtCS1","J/#psi Pt vs Cos(#theta) in CS frame;Cos(#theta) in CS frame; J/#psi Pt",10,-1,1,120,0,30);
	hHt2JpsiCosThetaPtCS1->Sumw2();

	hMcJpsiEtaPt = new TH2F("hMcJpsiEtaPt","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hMcJpsiEtaPt->Sumw2();
	hRcJpsiEtaPt = new TH2F("hRcJpsiEtaPt","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hRcJpsiEtaPt->Sumw2();
	hEidJpsiEtaPt = new TH2F("hEidJpsiEtaPt","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hEidJpsiEtaPt->Sumw2();
	hMBJpsiEtaPt = new TH2F("hMBJpsiEtaPt","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hMBJpsiEtaPt->Sumw2();
	hHt0JpsiEtaPt = new TH2F("hHt0JpsiEtaPt","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hHt0JpsiEtaPt->Sumw2();
	hHt1JpsiEtaPt = new TH2F("hHt1JpsiEtaPt","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hHt1JpsiEtaPt->Sumw2();
	hHt2JpsiEtaPt = new TH2F("hHt2JpsiEtaPt","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hHt2JpsiEtaPt->Sumw2();

	hMcJpsiEtaPt1 = new TH2F("hMcJpsiEtaPt1","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hMcJpsiEtaPt1->Sumw2();
	hRcJpsiEtaPt1 = new TH2F("hRcJpsiEtaPt1","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hRcJpsiEtaPt1->Sumw2();
	hMBJpsiEtaPt1 = new TH2F("hMBJpsiEtaPt1","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hMBJpsiEtaPt1->Sumw2();
	hHt0JpsiEtaPt1 = new TH2F("hHt0JpsiEtaPt1","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hHt0JpsiEtaPt1->Sumw2();
	hHt1JpsiEtaPt1 = new TH2F("hHt1JpsiEtaPt1","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hHt1JpsiEtaPt1->Sumw2();
	hHt2JpsiEtaPt1 = new TH2F("hHt2JpsiEtaPt1","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hHt2JpsiEtaPt1->Sumw2();

	hMcJpsiEtaPtCS = new TH2F("hMcJpsiEtaPtCS","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hMcJpsiEtaPtCS->Sumw2();
	hRcJpsiEtaPtCS = new TH2F("hRcJpsiEtaPtCS","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hRcJpsiEtaPtCS->Sumw2();
	hEidJpsiEtaPtCS = new TH2F("hEidJpsiEtaPtCS","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hEidJpsiEtaPtCS->Sumw2();
	hMBJpsiEtaPtCS = new TH2F("hMBJpsiEtaPtCS","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hMBJpsiEtaPtCS->Sumw2();
	hHt0JpsiEtaPtCS = new TH2F("hHt0JpsiEtaPtCS","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hHt0JpsiEtaPtCS->Sumw2();
	hHt1JpsiEtaPtCS = new TH2F("hHt1JpsiEtaPtCS","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hHt1JpsiEtaPtCS->Sumw2();
	hHt2JpsiEtaPtCS = new TH2F("hHt2JpsiEtaPtCS","J/#psi Pt vs #eta; #eta; J/#psi Pt",10,-1,1,120,0,30);
	hHt2JpsiEtaPtCS->Sumw2();

	hMcJpsiRapidityPt = new TH2F("hMcJpsiRapidityPt","J/#psi Rapidity;J/#psi Rapidity; J/#psi Pt",10,-1,1,120,0,30);
	hMcJpsiRapidityPt->Sumw2();
	hRcJpsiRapidityPt = new TH2F("hRcJpsiRapidityPt","J/#psi Rapidity;J/#psi Rapidity; J/#psi Pt",10,-1,1,120,0,30);
	hRcJpsiRapidityPt->Sumw2();
	hEidJpsiRapidityPt = new TH2F("hEidJpsiRapidityPt","J/#psi Rapidity;J/#psi Rapidity; J/#psi Pt",10,-1,1,120,0,30);
	hEidJpsiRapidityPt->Sumw2();
	hMBJpsiRapidityPt = new TH2F("hMBJpsiRapidityPt","J/#psi Rapidity;J/#psi Rapidity; J/#psi Pt",10,-1,1,120,0,30);	
	hMBJpsiRapidityPt->Sumw2();
	hHt0JpsiRapidityPt = new TH2F("hHt0JpsiRapidityPt","J/#psi Rapidity;J/#psi Rapidity; J/#psi Pt",10,-1,1,120,0,30);	
	hHt0JpsiRapidityPt->Sumw2();
	hHt1JpsiRapidityPt = new TH2F("hHt1JpsiRapidityPt","J/#psi Rapidity;J/#psi Rapidity; J/#psi Pt",10,-1,1,120,0,30);
	hHt1JpsiRapidityPt->Sumw2();
	hHt2JpsiRapidityPt = new TH2F("hHt2JpsiRapidityPt","J/#psi Rapidity;J/#psi Rapidity; J/#psi Pt",10,-1,1,120,0,30);
	hHt2JpsiRapidityPt->Sumw2();

	hMBJpsiRapidityPt1 = new TH2F("hMBJpsiRapidityPt1","J/#psi Rapidity;J/#psi Rapidity; J/#psi Pt",10,-1,1,120,0,30);	
	hMBJpsiRapidityPt1->Sumw2();
	hHt0JpsiRapidityPt1 = new TH2F("hHt0JpsiRapidityPt1","J/#psi Rapidity;J/#psi Rapidity; J/#psi Pt",10,-1,1,120,0,30);	
	hHt0JpsiRapidityPt1->Sumw2();
	hHt1JpsiRapidityPt1 = new TH2F("hHt1JpsiRapidityPt1","J/#psi Rapidity;J/#psi Rapidity; J/#psi Pt",10,-1,1,120,0,30);
	hHt1JpsiRapidityPt1->Sumw2();
	hHt2JpsiRapidityPt1 = new TH2F("hHt2JpsiRapidityPt1","J/#psi Rapidity;J/#psi Rapidity; J/#psi Pt",10,-1,1,120,0,30);
	hHt2JpsiRapidityPt1->Sumw2();

	hJpsiPtCosThetaInvM = new TH3F("hJpsiPtCosThetaInvM","J/#psi Pt; Cos(#theta); Invariant mass",120,0,30,10,-1,1,20,2,4);
	hJpsiPtCosThetaInvM->Sumw2();

	hJpsiCosThetaInvMPt = new TH3F("hJpsiCosThetaInvMPt","hJpsiCosThetaInvMPt",40,-1,1,40,2,4,120,0,30);
	hJpsiCosThetaInvMPtCS = new TH3F("hJpsiCosThetaInvMPtCS","hJpsiCosThetaInvMPt",40,-1,1,40,2,4,120,0,30);
	hJpsiCosThetaInvMPt1 = new TH3F("hJpsiCosThetaInvMPt1","hJpsiCosThetaInvMPt1",40,-1,1,40,2,4,120,0,30);
	hJpsiCosThetaInvMPtCS1 = new TH3F("hJpsiCosThetaInvMPtCS1","hJpsiCosThetaInvMPt1",40,-1,1,40,2,4,120,0,30);

	hJpsiCosThetaInvMPt->Sumw2();
	hJpsiCosThetaInvMPtCS->Sumw2();
	hJpsiCosThetaInvMPt1->Sumw2();
	hJpsiCosThetaInvMPtCS1->Sumw2();

	hJpsiPhiInvMPt = new TH3F("hJpsiPhiInvMPt","hJpsiPhiInvMPt",40,-1,1,40,2,4,120,0,30);
	hJpsiPhiInvMPtCS = new TH3F("hJpsiPhiInvMPtCS","hJpsiPhiInvMPt",40,-1,1,40,2,4,120,0,30);
	hJpsiPhiInvMPt1 = new TH3F("hJpsiPhiInvMPt1","hJpsiPhiInvMPt1",40,-1,1,40,2,4,120,0,30);
	hJpsiPhiInvMPtCS1 = new TH3F("hJpsiPhiInvMPtCS1","hJpsiPhiInvMPt1",40,-1,1,40,2,4,120,0,30);

	hJpsiPhiInvMPt->Sumw2();
	hJpsiPhiInvMPtCS->Sumw2();
	hJpsiPhiInvMPt1->Sumw2();
	hJpsiPhiInvMPtCS1->Sumw2();


	hMBdsmAdcInvMPt = new TH3F("hMBdsmAdcInvMPt","hMBdsmAdcInvMPt",4,0,40,40,2,4,120,0,30);
	hMBdsmAdcInvMPtBG = new TH3F("hMBdsmAdcInvMPtBG","hMBdsmAdcInvMPtBG",4,0,40,40,2,4,120,0,30);
	hMBAdcInvMPt = new TH3F("hMBAdcInvMPt","hMBAdcInvMPt",400,0,400,40,2,4,120,0,30);
	hMBAdcInvMPtBG = new TH3F("hMBAdcInvMPtBG","hMBAdcInvMPtBG",400,0,400,40,2,4,120,0,30);
	hMBdsmAdcInvMPt->Sumw2();
	hMBdsmAdcInvMPtBG->Sumw2();
	hMBAdcInvMPt->Sumw2();
	hMBAdcInvMPtBG->Sumw2();

	hHT0dsmAdcInvMPt = new TH3F("hHT0dsmAdcInvMPt","hHT0dsmAdcInvMPt",4,0,40,40,2,4,120,0,30);
	hHT0dsmAdcInvMPtBG = new TH3F("hHT0dsmAdcInvMPtBG","hHT0dsmAdcInvMPtBG",4,0,40,40,2,4,120,0,30);
	hHT0AdcInvMPt = new TH3F("hHT0AdcInvMPt","hHT0AdcInvMPt",400,0,400,40,2,4,120,0,30);
	hHT0AdcInvMPtBG = new TH3F("hHT0AdcInvMPtBG","hHT0AdcInvMPtBG",400,0,400,40,2,4,120,0,30);
	hHT0dsmAdcInvMPt->Sumw2();
	hHT0dsmAdcInvMPtBG->Sumw2();
	hHT0AdcInvMPt->Sumw2();
	hHT0AdcInvMPtBG->Sumw2();

	hHT1dsmAdcInvMPt = new TH3F("hHT1dsmAdcInvMPt","hHT1dsmAdcInvMPt",4,0,40,40,2,4,120,0,30);
	hHT1dsmAdcInvMPtBG = new TH3F("hHT1dsmAdcInvMPtBG","hHT1dsmAdcInvMPtBG",4,0,40,40,2,4,120,0,30);
	hHT1AdcInvMPt = new TH3F("hHT1AdcInvMPt","hHT1AdcInvMPt",400,0,400,40,2,4,120,0,30);
	hHT1AdcInvMPtBG = new TH3F("hHT1AdcInvMPtBG","hHT1AdcInvMPtBG",400,0,400,40,2,4,120,0,30);
	hHT1dsmAdcInvMPt->Sumw2();
	hHT1dsmAdcInvMPtBG->Sumw2();
	hHT1AdcInvMPt->Sumw2();
	hHT1AdcInvMPtBG->Sumw2();

	hHT2dsmAdcInvMPt = new TH3F("hHT2dsmAdcInvMPt","hHT2dsmAdcInvMPt",4,0,40,40,2,4,120,0,30);
	hHT2dsmAdcInvMPtBG = new TH3F("hHT2dsmAdcInvMPtBG","hHT2dsmAdcInvMPtBG",4,0,40,40,2,4,120,0,30);
	hHT2AdcInvMPt = new TH3F("hHT2AdcInvMPt","hHT2AdcInvMPt",400,0,400,40,2,4,120,0,30);
	hHT2AdcInvMPtBG = new TH3F("hHT2AdcInvMPtBG","hHT2AdcInvMPtBG",400,0,400,40,2,4,120,0,30);
	hHT2dsmAdcInvMPt->Sumw2();
	hHT2dsmAdcInvMPtBG->Sumw2();
	hHT2AdcInvMPt->Sumw2();
	hHT2AdcInvMPtBG->Sumw2();



	Clear("");
	return kStOK;
}

//_____________________________________________________________
Int_t StMyJpsiEffMaker::InitRun(Int_t runnumber)
{
	return kStOK;
}

//_____________________________________________________________
Int_t StMyJpsiEffMaker::FinishRun(Int_t runnumber)
{

	return kStOK;
}

//-------------------------------------------------------------
Int_t StMyJpsiEffMaker::Finish()
{
	f->Write();
	f->Close();
	Clear("");
	return kStOK;
}
//_____________________________________________________________
/*!
 * This method is to obtain the btofCollection from StEvent.
 * If StEvent is in the chain, retrieve it; if no StEvent in the chain,
 * a new StEvent is created.
 */
//_____________________________________________________________
Int_t StMyJpsiEffMaker::Make()
{
	const Int_t mDsmAdcCut[4] = {11, 15, 18, 25};

	//LOG_INFO<<"Test start of StMyJpsiEffMaker "<<endm;
	myChain->GetEntry(evCnt++);
	mRan->SetSeed(evCnt);
	if(!myEvent) return kStOk;
	if(myEvent->eventID()<=0) return kStOk;
	Double_t vz = myEvent->vertexZ();
	if(vz<mVzCut[0]||vz>mVzCut[1]) return kStOk;

	TLorentzVector JpsiMc(0.,0.,0.,0.), ePosMc(0.,0.,0.,0.), eNegMc(0.,0.,0.,0.);
	TLorentzVector JpsiRc(0.,0.,0.,0.), ePosRc(0.,0.,0.,0.), eNegRc(0.,0.,0.,0.);
	TLorentzVector JpsiMc_tem(0.,0.,0.,0.), ePosMc_tem(0.,0.,0.,0.), eNegMc_tem(0.,0.,0.,0.);
	Int_t nJpsi = 0;
	for(int j=0;j<myEvent->nReal();j++){
		mElectron = (StMyElectron*) myEvent->real()->UncheckedAt(j);
		if(mElectron->pGeantId!=160) continue;
		if(mElectron->mcId<0) continue;
		hCommonhitsvsMCPt->Fill(mElectron->tpcCommonHits,mElectron->mcPt);
		hCommonhitsvsRCPt->Fill(mElectron->tpcCommonHits,mElectron->pt);
		bool tag = kFALSE;
		for(int k=0;k<myEvent->nReal();k++){
			mElectron2 =(StMyElectron*) myEvent->real()->UncheckedAt(k);
			if(mElectron2->pGeantId!=160) continue;
			if(mElectron2->mcId<0) continue;
			if(mElectron2->mcId==mElectron->mcId) continue;
			if(mElectron->geantId==2 && mElectron2->geantId==3){
				ePosMc_tem.SetPtEtaPhiM(mElectron->mcPt, mElectron->mcEta, mElectron->mcPhi, EMASS);
				eNegMc_tem.SetPtEtaPhiM(mElectron2->mcPt, mElectron2->mcEta, mElectron2->mcPhi, EMASS);
			}
			else if(mElectron->geantId==3 && mElectron2->geantId==2){
				eNegMc_tem.SetPtEtaPhiM(mElectron->mcPt, mElectron->mcEta, mElectron->mcPhi, EMASS);
				ePosMc_tem.SetPtEtaPhiM(mElectron2->mcPt, mElectron2->mcEta, mElectron2->mcPhi, EMASS);
			} else {
				continue;
			};

			JpsiMc_tem = ePosMc_tem + eNegMc_tem;
			Double_t deta = mElectron->mcY - mElectron2->mcY;
			Double_t dphi = mElectron->mcPhi - mElectron2->mcPhi;
			while(dphi>2*TMath::Pi()) dphi -= 2.*TMath::Pi();
			while(dphi<0) dphi += 2.*TMath::Pi();
			while(dphi>TMath::Pi()) dphi = dphi -2*TMath::Pi();
			Double_t dReta = mElectron->eta - mElectron2->eta;
			Double_t dRphi = mElectron->phi - mElectron2->phi;
			while(dRphi>2*TMath::Pi()) dRphi-=2.*TMath::Pi();
			while(dRphi<0) dRphi += 2.*TMath::Pi();
			while(dRphi>TMath::Pi()) dRphi = dRphi - 2.*TMath::Pi();
			if(TMath::Abs(deta)<0.1 && TMath::Abs(dphi)<0.5 && mElectron2->pId!=mElectron->pId) tag = kTRUE;
		}
		if(tag) continue;
		Double_t pt_tem = mElectron->mcPt;
		hMCElectronPt->Fill(pt_tem);
		for(int k=j+1; k<myEvent->nReal();k++){
			mElectron2 =(StMyElectron*) myEvent->real()->UncheckedAt(k);
			if(mElectron2->pGeantId!=160) continue;
			if(mElectron2->mcId<0) continue;
			if(mElectron2->mcId==mElectron->mcId) continue;
			if(mElectron2->pId!=mElectron->pId) continue;
			if(mElectron->geantId==2 && mElectron2->geantId==3){
				ePosMc.SetPtEtaPhiM(mElectron->mcPt, mElectron->mcEta, mElectron->mcPhi, EMASS);
				eNegMc.SetPtEtaPhiM(mElectron2->mcPt,mElectron2->mcEta, mElectron2->mcPhi, EMASS);
				ePosRc.SetPtEtaPhiM(mElectron->pt, mElectron->eta, mElectron->phi, EMASS);
				eNegRc.SetPtEtaPhiM(mElectron2->pt, mElectron2->eta, mElectron2->phi, EMASS);	
			}
			else if(mElectron->geantId==3 && mElectron2->geantId==2){
				eNegMc.SetPtEtaPhiM(mElectron->mcPt, mElectron->mcEta, mElectron->mcPhi, EMASS);
				ePosMc.SetPtEtaPhiM(mElectron2->mcPt, mElectron2->mcEta, mElectron2->mcPhi, EMASS);
				eNegRc.SetPtEtaPhiM(mElectron->pt, mElectron->eta, mElectron->phi, EMASS);
				ePosRc.SetPtEtaPhiM(mElectron2->pt, mElectron2->eta, mElectron2->phi, EMASS);
			}
			else {continue;}
			if(mDoSmearing){
				TRandom *rcRand1 = new TRandom();
				TRandom *rcRand2 = new TRandom();
				double rcPt1 = (mElectron->pt)*(1+rcRand1->Gaus(0,mSmearingFac*(mElectron->pt)));
				double rcPt2 = (mElectron2->pt)*(1+rcRand2->Gaus(0,mSmearingFac*(mElectron2->pt)));
				if(mElectron->geantId==2 && mElectron2->geantId==3){
					ePosMc.SetPtEtaPhiM(mElectron->mcPt, mElectron->mcEta, mElectron->mcPhi, EMASS);
					eNegMc.SetPtEtaPhiM(mElectron2->mcPt,mElectron2->mcEta, mElectron2->mcPhi, EMASS);
					ePosRc.SetPtEtaPhiM(rcPt1, mElectron->eta, mElectron->phi, EMASS);
					eNegRc.SetPtEtaPhiM(rcPt2, mElectron2->eta, mElectron2->phi, EMASS);	
				}
				else if(mElectron->geantId==3 && mElectron2->geantId==2){
					eNegMc.SetPtEtaPhiM(mElectron->mcPt, mElectron->mcEta, mElectron->mcPhi, EMASS);
					ePosMc.SetPtEtaPhiM(mElectron2->mcPt, mElectron2->mcEta, mElectron2->mcPhi, EMASS);
					eNegRc.SetPtEtaPhiM(rcPt1, mElectron->eta, mElectron->phi, EMASS);
					ePosRc.SetPtEtaPhiM(rcPt2, mElectron2->eta, mElectron2->phi, EMASS);
				}
				else {continue;}
			}
			JpsiMc = ePosMc + eNegMc;

			JpsiRc = ePosRc + eNegRc;
			nJpsi++;

			//	Double_t weight1 = 4.32*TMath::Power(1+(JpsiMc.Pt()/4.10)*(JpsiMc.Pt()/4.10), -6)*(JpsiMc.Pt())*TMath::Exp(-0.5*(JpsiMc.Rapidity()*JpsiMc.Rapidity())/(1.416*1.416));
			Double_t weight1 = (A+Aplus-Aminus)*TMath::Power(1+(JpsiMc.Pt()/(B+Bplus-Bminus))*(JpsiMc.Pt()/(B+Bplus-Bminus)), -6)*(JpsiMc.Pt());
			if(rapidity)weight1 = weight1*TMath::Exp(-0.5*(JpsiMc.Rapidity()*JpsiMc.Rapidity())/(1.416*1.416));

			if(mElectron->mcId>=0 && mElectron2->mcId>=0) { 
				float deltaeta = mElectron->mcEta -mElectron2->mcEta;
				float deltaphi = mElectron->mcPhi - mElectron2->mcPhi;
				while(deltaphi>2*TMath::Pi()) deltaphi -= 2.*TMath::Pi();
				while(deltaphi<0) deltaphi += 2.*TMath::Pi();
				while(deltaphi>TMath::Pi()) deltaphi = deltaphi -2*TMath::Pi();
				double deltaR =0;
				if(JpsiMc.Rapidity()<1 && JpsiMc.Rapidity()>-1.){
				}
				else{continue;}
			}			

			TLorentzVector Proton1(0.,0.,100.,100),Proton2(0.,0.,-100.,100);						
			TLorentzVector CSProton1(0.,0.,0.,0.),CSProton2(0.,0.,0.,0.);
			TLorentzVector Zaxis(0.,0.,0.,0.),Yaxis(0.,0.,0.,0.),Xaxis(0.,0.,0.,0.);
			TVector3 XX(0.,0.,0.),YY(0.,0.,0.),ZZ(0.,0.,0.);
			TVector3 XXHX(0.,0.,0.),YYHX(0.,0.,0.),ZZHX(0.,0.,0.);

			Proton1.Boost(-JpsiMc.Px()/JpsiMc.E(),-JpsiMc.Py()/JpsiMc.E(),-JpsiMc.Pz()/JpsiMc.E());
			Proton2.Boost(-JpsiMc.Px()/JpsiMc.E(),-JpsiMc.Py()/JpsiMc.E(),-JpsiMc.Pz()/JpsiMc.E());

			YYHX = JpsiMc.Vect().Cross(Proton1.Vect());
			XXHX = YYHX.Cross(JpsiMc.Vect());

			Yaxis.SetPx(Proton1.Py()*Proton2.Pz()-Proton1.Pz()*Proton2.Py());
			Yaxis.SetPy(Proton1.Pz()*Proton2.Px()-Proton1.Px()*Proton2.Pz());
			Yaxis.SetPz(Proton1.Px()*Proton2.Py()-Proton1.Py()*Proton2.Px());

			ZZ = Proton1.Vect()*(1/(Proton1.Vect()).Mag())-Proton2.Vect()*(1/(Proton2.Vect()).Mag());

			YY = Proton1.Vect().Cross(Proton2.Vect());
			Xaxis = Proton1;
			Xaxis = Zaxis;
			XX = Proton1.Vect()*(1/(Proton1.Vect()).Mag())+Proton2.Vect()*(1/(Proton2.Vect()).Mag());

			TLorentzVector ePosMcRest = ePosMc;
			TLorentzVector ePosRcRest = ePosRc;
			ePosMcRest.Boost(-JpsiMc.Px()/JpsiMc.E(),-JpsiMc.Py()/JpsiMc.E(),-JpsiMc.Pz()/JpsiMc.E());
			ePosRcRest.Boost(-JpsiRc.Px()/JpsiRc.E(),-JpsiRc.Py()/JpsiRc.E(),-JpsiRc.Pz()/JpsiRc.E());
			Double_t dtheta = JpsiMc.Angle(ePosMcRest.Vect());
			Double_t costheta = TMath::Cos(dtheta);

			if(polarization!=0) weight1=weight1*(1+polarization*costheta*costheta);

			Double_t dtheta_CS = ZZ.Angle(ePosMcRest.Vect());
			Double_t dphi_CS = TMath::ATan2((ePosMcRest.Vect().Dot(XX*(1/XX.Mag()))),(ePosMcRest.Vect().Dot(YY*(1/YY.Mag()))));
			Double_t dphi_HX = TMath::ATan2((ePosMcRest.Vect().Dot(XXHX*(1./XXHX.Mag()))),(ePosMcRest.Vect().Dot(YYHX*(1./YYHX.Mag()))));

			hMcJpsiCosThetaPt->Fill(costheta,JpsiMc.Pt(),weight1);
			McJpsiCosThetaPt->Fill(TMath::Cos(JpsiRc.Angle(ePosRcRest.Vect())),JpsiRc.Pt(),weight1);
			hMcJpsiEtaPt->Fill(JpsiMc.Eta(),JpsiMc.Pt(),weight1);
			hMcJpsiRapidityPt->Fill(JpsiMc.Rapidity(),JpsiMc.Pt(),weight1);
			hMcJpsiPhiPt->Fill(dphi_HX,JpsiMc.Pt(),weight1);

			hMcJpsiThetaPtCS->Fill(dtheta_CS,JpsiMc.Pt(),weight1);
			hMcJpsiPhiPtCS->Fill(dphi_CS,JpsiMc.Pt(),weight1);
			hMcJpsiCosThetaPtCS->Fill(TMath::Cos(dtheta_CS),JpsiMc.Pt(),weight1);
			hMcJpsiCosThetaPtCS1->Fill(TMath::Cos(dtheta_CS),JpsiMc.Pt(),weight1);
			hJpsiPtCosThetaInvM->Fill(JpsiRc.Pt(),TMath::Cos(dtheta),JpsiRc.M());

			if(mElectron->id>=0 && mElectron2->id>=0){
				bool Qualityflag[2] ={kFALSE, kFALSE};
				double eta1 = mElectron->eta;
				double phi1 = mElectron->phi;
				double dca1 = mElectron->dca;
				double nHitsFit1 = mElectron->nFitPts;
				double eta2 = mElectron2->eta;
				double phi2 = mElectron2->phi;
				double dca2 = mElectron2->dca;
				double nHitsFit2 = mElectron2->nFitPts;
			}
			if(mElectron->id>=0 && mElectron2->id>=0){
				Double_t eta1 = mElectron->eta;
				Double_t phi1 = mElectron->phi;
				Double_t dca1 = mElectron->dca;
				Double_t nHitsFit1 = mElectron->nFitPts;
				Double_t nMaxPts1 = mElectron->nMaxPts;
				Double_t e1 = mElectron->energy0;	
				Double_t adc01 = mElectron->adc0;
				Double_t dsmAdc01 = mElectron->dsmAdc0;
				Double_t p1 = mElectron->p;
				Double_t pe1 = (e1>0.1)? p1/e1:9999;
				Double_t pt1 = mElectron->pt;
				if(mDoSmearing){
					pt1=pt1*(1.+mRan->Gaus(0,mSmearingFac*pt1));	
				}

				Double_t nEta1 = mElectron->nEta;
				Double_t nPhi1 = mElectron->nPhi;
				Double_t zDist1 = mElectron->zDist;
				Double_t phiDist1 = mElectron->phiDist;
				Double_t nHitsdedx1 = mElectron->nDedxPts;
				Double_t nsigma1 = myGaus_1->GetRandom();

				double polpara[2][2];

				if(POL==1){
					polpara[0][0]=meanfit->GetParameter(0);
					polpara[0][1]=meanfit->GetParameter(1);
					polpara[1][0]=sigmafit->GetParameter(0);
					polpara[1][1]=sigmafit->GetParameter(1);
				}

				if(POL==1) {
					myGaus_1->SetParameters(1,polpara[0][0]+polpara[0][1]*pt1,polpara[1][0]+polpara[1][1]*pt1);
					cout<<"         "<<myGaus_1->GetParameter(1)<<"         "<<myGaus_1->GetParameter(2)<<endl;
					nsigma1 = myGaus_1->GetRandom();
				}
				bool isEmc1 = kFALSE,isTpc1 = kFALSE,isTOF1 = kFALSE,isHt1[4];
				for(int iht=0;iht<4;iht++) isHt1[iht] = kFALSE;
				int charge1 = 0;
				if(mElectron->geantId==2) charge1 = 1;
				if(mElectron->geantId==3) charge1 = -1;
				double tofEff1 = getTOFeff(charge1, pt1, eta1);
				double beta1para[2][2];
				double beta1=0;
				double pEff1 =p1;
				if(p1>1.5) pEff1 =1.5;
				beta1para[0][0]=betamean->GetBinContent(betamean->FindBin(pEff1));
				beta1para[0][1]=betamean->GetBinError(betamean->FindBin(pEff1));
				beta1para[1][0]=betasigma->GetBinContent(betasigma->FindBin(pEff1));
				beta1para[1][1]=betasigma->GetBinError(betasigma->FindBin(pEff1));
				betaGaus1->SetParameters(1,beta1para[0][0]+meanbeta*beta1para[0][1],beta1para[1][0]+sigmabeta*beta1para[1][1]);
				beta1=betaGaus1->GetRandom();

				Double_t eta2 = mElectron2->eta;
				Double_t phi2 = mElectron2->phi;
				Double_t dca2 = mElectron2->dca;
				Double_t nHitsFit2 = mElectron2->nFitPts;
				Double_t nMaxPts2 = mElectron2->nMaxPts;
				Double_t e2 = mElectron2->energy0;
				Double_t adc02 = mElectron2->adc0;
				Double_t dsmAdc02 = mElectron2->dsmAdc0;
				Double_t p2 = mElectron2->p;
				Double_t pe2 = (e2>0.1)? p2/e2:9999;
				Double_t pt2 = mElectron2->pt;
				if(mDoSmearing) {
					pt2 = pt2*(1+mRan->Gaus(0,mSmearingFac*pt2));
				}
				Double_t nEta2 = mElectron2->nEta;
				Double_t nPhi2 = mElectron2->nPhi;
				Double_t zDist2 = mElectron2->zDist;
				Double_t phiDist2 = mElectron2->phiDist;
				Double_t nHitsdedx2 = mElectron2->nDedxPts;
				Double_t nsigma2 = myGaus->GetRandom();

				if(POL==1){
					myGaus->SetParameters(1,polpara[0][0]+polpara[0][1]*pt2,polpara[1][0]+polpara[1][1]*pt2);
					nsigma2=myGaus->GetRandom();
				}
				bool isTpc2 = kFALSE, isEmc2 = kFALSE,isTOF2 = kFALSE,isHt2[4];
				for(int iht=0;iht<4;iht++) isHt2[iht]=kFALSE;
				int charge2 = 0;
				if(mElectron2->geantId==2) charge2 = 1;
				if(mElectron2->geantId==3) charge2 = -1;
				double tofEff2 = getTOFeff(charge2, pt2, eta2);
				double beta2para[2][2];
				double beta2=0;
				double pEff2 = p2;
				if(p2>1.5) pEff2 =1.5;
				beta2para[0][0]=betamean->GetBinContent(betamean->FindBin(pEff2));
				beta2para[0][1]=betamean->GetBinError(betamean->FindBin(pEff2));
				beta2para[1][0]=betasigma->GetBinContent(betasigma->FindBin(pEff2));
				beta2para[1][1]=betasigma->GetBinError(betasigma->FindBin(pEff2));
				betaGaus2->SetParameters(1,beta2para[0][0]+meanbeta*beta2para[0][1],beta2para[1][0]+sigmabeta*beta2para[1][1]);
				beta2=betaGaus2->GetRandom();

				if(JpsiRc.Rapidity()<=-1 || JpsiRc.Rapidity()>=1) continue;
				if(nHitsFit1>=mTpceHitsFitCut &&
						nHitsFit1/nMaxPts1>=0.52 &&
						dca1<=mTpceDcaCut &&
						eta1>=mTpceEtaCut[0] && eta1<=mTpceEtaCut[1] &&
						nsigma1>=mTpceLoosenSigmaElectronCut[0] && nsigma1<=mTpceLoosenSigmaElectronCut[1] &&
						nHitsdedx1>=mTpceHitsDedxCut && 
						mElectron->tpcCommonHits>=10 && 
						pt1>0.2){
					isTpc1 = kTRUE;
					if(pe1>0.3 && pe1<1.5 && pt1>1.4 && nsigma1>=mTpcenSigmaElectronCut[0] && nsigma1<=mTpcenSigmaElectronCut[1]) isEmc1 = kTRUE;
					if(beta1>=mTpceBetaCut[0] && beta1<=mTpceBetaCut[1] && nsigma1>=mTpcenSigmaElectronCut[0] && nsigma1<=mTpcenSigmaElectronCut[1] && mRan->Uniform(0,1)<tofEff1)isTOF1 = kTRUE;
				}

				if(nHitsFit2>=mTpceHitsFitCut &&
						nHitsFit2/nMaxPts2>=0.52 &&
						dca2<=mTpceDcaCut &&
						eta2>=mTpceEtaCut[0] && eta2<=mTpceEtaCut[1] &&
						nsigma2>=mTpceLoosenSigmaElectronCut[0] && nsigma2<=mTpceLoosenSigmaElectronCut[1] &&
						nHitsdedx2>=mTpceHitsDedxCut &&
						mElectron2->tpcCommonHits>=10 &&
						pt2>0.2){
					isTpc2 = kTRUE;
					if(pe2>0.3 && pe2<1.5 && pt2>1.4 && nsigma2>=mTpcenSigmaElectronCut[0] && nsigma2<=mTpcenSigmaElectronCut[1]) isEmc2 = kTRUE;
					if(beta2>=mTpceBetaCut[0] && beta2<=mTpceBetaCut[1] && nsigma2>=mTpcenSigmaElectronCut[0] && nsigma2<=mTpcenSigmaElectronCut[1] && mRan->Uniform(0,1)<tofEff2)isTOF2 = kTRUE;
				}		

				if(dsmAdc01>11*dsmadcfactor && pt1>2.5) isHt1[0] = kTRUE;
				if(dsmAdc02>11*dsmadcfactor && pt2>2.5) isHt2[0] = kTRUE;
				if(dsmAdc01>15*dsmadcfactor && pt1>3.6) isHt1[1] = kTRUE;
				if(dsmAdc02>15*dsmadcfactor && pt2>3.6) isHt2[1] = kTRUE;
				if(dsmAdc01>18*dsmadcfactor && pt1>4.3) isHt1[2] = kTRUE;
				if(dsmAdc02>18*dsmadcfactor && pt2>4.3) isHt2[2] = kTRUE;

				if(isTpc1 == kTRUE && isTpc2 == kTRUE) {
					hJpsiCosThetaInvMPt->Fill(costheta,JpsiRc.M(),JpsiRc.Pt(),weight1);
					hJpsiCosThetaInvMPtCS->Fill(TMath::Cos(dtheta_CS),JpsiRc.M(),JpsiRc.Pt(),weight1);
					hJpsiPhiInvMPt->Fill(dphi_HX,JpsiRc.M(),JpsiRc.Pt(),weight1);
					hJpsiPhiInvMPtCS->Fill(dphi_CS,JpsiRc.M(),JpsiRc.Pt(),weight1);
				}
				if(isTpc1 == kTRUE || isTpc2 == kTRUE) {
					hJpsiCosThetaInvMPt1->Fill(costheta,JpsiRc.M(),JpsiRc.Pt(),weight1);
					hJpsiCosThetaInvMPtCS1->Fill(TMath::Cos(dtheta_CS),JpsiRc.M(),JpsiRc.Pt(),weight1);
					hJpsiPhiInvMPt1->Fill(dphi_HX,JpsiRc.M(),JpsiRc.Pt(),weight1);
					hJpsiPhiInvMPtCS1->Fill(dphi_CS,JpsiRc.M(),JpsiRc.Pt(),weight1);
				}

				if((isEmc1==kTRUE || isTOF1) || (isEmc2==kTRUE || isTOF2)){  //  or passed tof cuts 
					if((isTpc1 && isTpc2) || (isTpc2 && isEmc1) || (isTpc1 && isEmc2) || (isEmc1 && isEmc2)) {
						hMBdsmAdcInvMPt->Fill(dsmAdc01,JpsiRc.M(),JpsiRc.Pt());	
						hMBdsmAdcInvMPt->Fill(dsmAdc02,JpsiRc.M(),JpsiRc.Pt());
						hMBAdcInvMPt->Fill(adc01,JpsiRc.M(),JpsiRc.Pt());	
						hMBAdcInvMPt->Fill(adc02,JpsiRc.M(),JpsiRc.Pt());	
					}
					if((isEmc1 && isTpc2 && isHt1[0])||(isEmc2 && isTpc1 && isHt2[0]) || (isEmc1 && isEmc2 && isHt1[0]) || (isEmc1 && isEmc2 && isHt2[0])) {
						hHT0dsmAdcInvMPt->Fill(dsmAdc01,JpsiRc.M(),JpsiRc.Pt());	
						hHT0dsmAdcInvMPt->Fill(dsmAdc02,JpsiRc.M(),JpsiRc.Pt());
						hHT0AdcInvMPt->Fill(adc01,JpsiRc.M(),JpsiRc.Pt());	
						hHT0AdcInvMPt->Fill(adc02,JpsiRc.M(),JpsiRc.Pt());	
					}
					if((isEmc1 && isTpc2 && isHt1[1])||(isEmc2 && isTpc1 && isHt2[1]) || (isEmc1 && isEmc2 && isHt1[1]) || (isEmc1 && isEmc2 && isHt2[1])) {
						hHT1dsmAdcInvMPt->Fill(dsmAdc01,JpsiRc.M(),JpsiRc.Pt());	
						hHT1dsmAdcInvMPt->Fill(dsmAdc02,JpsiRc.M(),JpsiRc.Pt());
						hHT1AdcInvMPt->Fill(adc01,JpsiRc.M(),JpsiRc.Pt());	
						hHT1AdcInvMPt->Fill(adc02,JpsiRc.M(),JpsiRc.Pt());	
					}
					if((isEmc1 && isTpc2 && isHt1[2])||(isEmc2 && isTpc1 && isHt2[2]) || (isEmc1 && isEmc2 && isHt1[2]) || (isEmc1 && isEmc2 && isHt2[2])) {
						hHT2dsmAdcInvMPt->Fill(dsmAdc01,JpsiRc.M(),JpsiRc.Pt());	
						hHT2dsmAdcInvMPt->Fill(dsmAdc02,JpsiRc.M(),JpsiRc.Pt());
						hHT2AdcInvMPt->Fill(adc01,JpsiRc.M(),JpsiRc.Pt());	
						hHT2AdcInvMPt->Fill(adc02,JpsiRc.M(),JpsiRc.Pt());	
					}
				}

				if(JpsiRc.M()>3.0 && JpsiRc.M()<3.2){
					if(isTpc1 == kTRUE && isTpc2 == kTRUE) {
						hRcJpsiCosThetaPt->Fill(costheta,JpsiMc.Pt(),weight1);
						RcJpsiCosThetaPt->Fill(TMath::Cos(JpsiRc.Angle(ePosRcRest.Vect())),JpsiRc.Pt(),weight1);
						hRcJpsiCosThetaPtCS->Fill(TMath::Cos(dtheta_CS),JpsiMc.Pt(),weight1);
						hRcJpsiCosThetaPtCS1->Fill(TMath::Cos(dtheta_CS),JpsiMc.Pt(),weight1);
						hRcJpsiThetaPtCS->Fill(dtheta_CS,JpsiMc.Pt(),weight1);
						hRcJpsiPhiPt->Fill(dphi_HX,JpsiMc.Pt(),weight1);
						hRcJpsiPhiPtCS->Fill(dphi_CS,JpsiMc.Pt(),weight1);
						hRcJpsiEtaPt->Fill(JpsiMc.Eta(),JpsiMc.Pt(),weight1);
						hRcJpsiRapidityPt->Fill(JpsiMc.Rapidity(),JpsiMc.Pt(),weight1);
						hRcJpsiThetaPt->Fill(dtheta,JpsiMc.Pt(),weight1);
						if((isEmc1==kTRUE || isTOF1) && (isEmc2==kTRUE || isTOF2)){  //  or passed tof cuts 
							hMBJpsiCosThetaPt->Fill(costheta,JpsiMc.Pt(),weight1);
							MBJpsiCosThetaPt->Fill(TMath::Cos(JpsiRc.Angle(ePosRcRest.Vect())),JpsiRc.Pt(),weight1);
							hMBJpsiPhiPt->Fill(dphi_HX,JpsiMc.Pt(),weight1);
							hMBJpsiThetaPt->Fill(dtheta,JpsiMc.Pt(),weight1);
							hMBJpsiThetaPtCS->Fill(dtheta_CS,JpsiMc.Pt(),weight1);
							hMBJpsiPhiPtCS->Fill(dphi_CS,JpsiMc.Pt(),weight1);
							hMBJpsiCosThetaPtCS->Fill(TMath::Cos(dtheta_CS),JpsiMc.Pt(),weight1);
							hMBJpsiEtaPt->Fill(JpsiMc.Eta(),JpsiMc.Pt(),weight1);
							hMBJpsiRapidityPt->Fill(JpsiMc.Rapidity(),JpsiMc.Pt(),weight1);
							if((isEmc1 && isHt1[0]) || (isEmc2 && isHt2[0]) || (isEmc1 && isHt1[0]) || (isEmc2 && isHt2[0])){
								hHt0JpsiCosThetaPt->Fill(costheta,JpsiMc.Pt(),weight1);
								HT0JpsiCosThetaPt->Fill(TMath::Cos(JpsiRc.Angle(ePosRcRest.Vect())),JpsiRc.Pt(),weight1);
								hHt0JpsiPhiPt->Fill(dphi_HX,JpsiMc.Pt(),weight1);
								hHt0JpsiPhiPtCS->Fill(dphi_CS,JpsiMc.Pt(),weight1);
								hHt0JpsiCosThetaPtCS->Fill(TMath::Cos(dtheta_CS),JpsiMc.Pt(),weight1);
							}

							if((isEmc1 && isHt1[1])||(isEmc2 && isHt2[1])||(isEmc1 && isHt1[1])||(isEmc2 && isHt2[1])){
								hHt1JpsiCosThetaPt->Fill(costheta,JpsiMc.Pt(),weight1);
								HT1JpsiCosThetaPt->Fill(TMath::Cos(JpsiRc.Angle(ePosRcRest.Vect())),JpsiRc.Pt(),weight1);
								hHt1JpsiPhiPt->Fill(dphi_HX,JpsiMc.Pt(),weight1);
								hHt1JpsiPhiPtCS->Fill(dphi_CS,JpsiMc.Pt(),weight1);
								hHt1JpsiCosThetaPtCS->Fill(TMath::Cos(dtheta_CS),JpsiMc.Pt(),weight1);
							}

							if((isEmc1 && isHt1[2])||(isEmc2 && isHt2[2])||(isEmc1 && isHt1[2])||(isEmc2 && isHt2[2])){
								hHt2JpsiCosThetaPt->Fill(costheta,JpsiMc.Pt(),weight1);
								HT2JpsiCosThetaPt->Fill(TMath::Cos(JpsiRc.Angle(ePosRcRest.Vect())),JpsiRc.Pt(),weight1);
								hHt2JpsiPhiPt->Fill(dphi_HX,JpsiMc.Pt(),weight1);
								hHt2JpsiPhiPtCS->Fill(dphi_CS,JpsiMc.Pt(),weight1);
								hHt2JpsiCosThetaPtCS->Fill(TMath::Cos(dtheta_CS),JpsiMc.Pt(),weight1);
							}
						}
						if((isEmc1==kTRUE || isTOF1) || (isEmc2==kTRUE || isTOF2)){  //  or passed tof cuts 
							if((isTpc1 && isTpc2) || (isTpc2 && isEmc1) || (isTpc1 && isEmc2) || (isEmc1 && isEmc2)) {
								hMBJpsiCosThetaPt1->Fill(costheta,JpsiMc.Pt(),weight1);
								hMBJpsiPhiPt1->Fill(dphi_HX,JpsiMc.Pt(),weight1);
								hMBJpsiPhiPtCS1->Fill(dphi_CS,JpsiMc.Pt(),weight1);
								hMBJpsiCosThetaPtCS1->Fill(TMath::Cos(dtheta_CS),JpsiMc.Pt(),weight1);
							}
							if((isEmc1 && isTpc2 && isHt1[0])||(isEmc2 && isTpc1 && isHt2[0]) || (isEmc1 && isEmc2 && isHt1[0]) || (isEmc1 && isEmc2 && isHt2[0])) {
								hHt0JpsiCosThetaPt1->Fill(costheta,JpsiMc.Pt(),weight1);
								hHt0JpsiPhiPt1->Fill(dphi_HX,JpsiMc.Pt(),weight1);
								hHt0JpsiPhiPtCS1->Fill(dphi_CS,JpsiMc.Pt(),weight1);
								hHt0JpsiCosThetaPtCS1->Fill(TMath::Cos(dtheta_CS),JpsiMc.Pt(),weight1);
							}
							if((isEmc1 && isTpc2 && isHt1[1])||(isEmc2 && isTpc1 && isHt2[1]) || (isEmc1 && isEmc2 && isHt1[1]) || (isEmc1 && isEmc2 && isHt2[1])) {
								hHt1JpsiCosThetaPt1->Fill(costheta,JpsiMc.Pt(),weight1);
								hHt1JpsiPhiPt1->Fill(dphi_HX,JpsiMc.Pt(),weight1);
								hHt1JpsiPhiPtCS1->Fill(dphi_CS,JpsiMc.Pt(),weight1);
								hHt1JpsiCosThetaPtCS1->Fill(TMath::Cos(dtheta_CS),JpsiMc.Pt(),weight1);
							}
							if((isEmc1 && isTpc2 && isHt1[2])||(isEmc2 && isTpc1 && isHt2[2]) || (isEmc1 && isEmc2 && isHt1[2]) || (isEmc1 && isEmc2 && isHt2[2])) {
								hHt2JpsiCosThetaPt1->Fill(costheta,JpsiMc.Pt(),weight1);
								hHt2JpsiPhiPt1->Fill(dphi_HX,JpsiMc.Pt(),weight1);
								hHt2JpsiPhiPtCS1->Fill(dphi_CS,JpsiMc.Pt(),weight1);
								hHt2JpsiCosThetaPtCS1->Fill(TMath::Cos(dtheta_CS),JpsiMc.Pt(),weight1);
							}
						}
					}
				}
			}	
		}
	}
	return kStOk;
}

Double_t StMyJpsiEffMaker::getTOFeff(int charge, double pt, double eta){
	int ieta = (eta-mEtaMin)/mdEta;
	if(eta>mEtaMin && eta<mEtaMax){
		if(ieta<0||ieta>20) cout<<"WARN: eta bin is not within [-1,1]"<<endl;
		if(charge==1){
			function_tofeff->SetParameters(mTofEffParsPos[ieta][0]+tofmatching*mTofEffParsPos[ieta][1],mTofEffParsPos[ieta][2]+tofmatching*mTofEffParsPos[ieta][3],mTofEffParsPos[ieta][4]+tofmatching*mTofEffParsPos[ieta][5]);
		}else if(charge==-1){
			function_tofeff->SetParameters(mTofEffParsNeg[ieta][0]+tofmatching*mTofEffParsNeg[ieta][1],mTofEffParsNeg[ieta][2]+tofmatching*mTofEffParsNeg[ieta][3],mTofEffParsNeg[ieta][4]+tofmatching*mTofEffParsNeg[ieta][5]);
		}

		if(charge==1 || charge==-1){
			return function_tofeff->Eval(pt);
		}else{
			return 0.;
		}
	}else{
		return 0.;
	}
}
